[{"path":"https://courtiol.github.io/timevarcorr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Alexandre Courtiol Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://courtiol.github.io/timevarcorr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexandre Courtiol. Author, maintainer, copyright holder. François Rousset. Author.","code":""},{"path":"https://courtiol.github.io/timevarcorr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Courtiol , Rousset F (2023). timevarcorr: Time Varying Correlation. R package version 0.1.1, https://github.com/courtiol/timevarcorr, https://courtiol.github.io/timevarcorr/.","code":"@Manual{,   title = {timevarcorr: Time Varying Correlation},   author = {Alexandre Courtiol and François Rousset},   year = {2023},   note = {R package version 0.1.1, https://github.com/courtiol/timevarcorr},   url = {https://courtiol.github.io/timevarcorr/}, }"},{"path":"https://courtiol.github.io/timevarcorr/index.html","id":"timevarcorr","dir":"","previous_headings":"","what":"Time Varying Correlation","title":"Time Varying Correlation","text":"R package aims measuring correlation 2 time-series changes time, following method described Choi & Shin (2021): Choi, JE., Shin, D.W. Nonparametric estimation time varying correlation coefficient. J. Korean Stat. Soc. 50, 333–353 (2021). doi:10.1007/s42952-020-00073-6 chief idea perform non-parametric kernel smoothing (using common bandwidth) underlying components required computation correlation coefficient (.e., x, y, x2, y2, x * y). automatic selection procedure bandwidth parameter proposed paper implemented package. goes computation confidence intervals. also implemented possibility use Epanechnikov, Gaussian, box kernels, well estimate either Pearson Spearman correlation coefficient.","code":""},{"path":"https://courtiol.github.io/timevarcorr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Time Varying Correlation","text":"can install CRAN version timevarcorr : can install development version timevarcorr GitHub : suffice! Note package relies far one direct dependency – lpridge – depends nothing plain R install. Nonetheless, examples , also rely dplyr ggplot2, need install packages well reproduce content README:","code":"install.packages(\"timevarcorr\") # install.packages(\"remotes\") ## uncomment and run if you don't have this package installed remotes::install_github(\"courtiol/timevarcorr\") install.packages(\"dplyr\") install.packages(\"ggplot2\")"},{"path":"https://courtiol.github.io/timevarcorr/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Time Varying Correlation","text":"main function package called tcor documentation available : simple example using base-R syntax:  example using tidyverse syntax (confidence interval):  now, example showing gaps observations time series:  can . example, can use kernels, fix bandwidth manually, use Spearman’s rather Pearson’s correlation coefficient:  can also test difference correlation coefficients two time points: can test specific time points () differ reference value:","code":"help(tcor, package = timevarcorr) library(timevarcorr) #> timevarcorr loaded; type ?tcor for help on this package.  d <- stockprice[1:500, ] example1 <- with(d, tcor(x = SP500, y = FTSE100, t = DateID, kernel = \"normal\")) #>  #> You may use several CPU cores for faster computation by calling `options('mc.cores' = XX)` with `XX` corresponding to the number of CPU cores to be used. #> h selected using LOO-CV = 60.9 #> Bandwidth automatic selection completed in 9.1 seconds plot(example1, type = \"l\") library(dplyr) library(ggplot2)  d |>    reframe(tcor(x = SP500, y = FTSE100, t = DateID,                kernel = \"normal\", CI = TRUE)) |>   ggplot() +     aes(x = t, y = r, ymin = lwr, ymax = upr) +     geom_ribbon(fill = \"grey\") +     geom_line() +     labs(title = \"SP500 vs FTSE100\", x = \"Time\", y = \"Correlation\") +     theme_classic() d |>    reframe(tcor(x = SP500, y = FTSE100, t = DateID,                kernel = \"normal\", CI = TRUE, keep.missing = TRUE)) |>   ggplot() +     aes(x = t, y = r, ymin = lwr, ymax = upr) +     geom_ribbon(fill = \"grey\") +     geom_line() +     labs(title = \"SP500 vs FTSE100\", x = \"Time\", y = \"Correlation\") +     theme_classic() #>  #> You may use several CPU cores for faster computation by calling `options('mc.cores' = XX)` with `XX` corresponding to the number of CPU cores to be used. #> h selected using LOO-CV = 60.9 #> Bandwidth automatic selection completed in 8.7 seconds example2 <- with(d, tcor(x = SP500, y = FTSE100, t = DateID,                  cor.method = \"spearman\", kernel = \"box\", h = 10)) plot(example2, type = \"l\") example3 <- with(d, tcor(x = SP500, y = FTSE100, t = DateID, kernel = \"normal\", CI = TRUE)) #>  #> You may use several CPU cores for faster computation by calling `options('mc.cores' = XX)` with `XX` corresponding to the number of CPU cores to be used. #> h selected using LOO-CV = 60.9 #> Bandwidth automatic selection completed in 8.9 seconds test_equality(example3, t1 = \"2000-05-02\", t2 = \"2001-05-02\") #>           t1        r1         t2     r2   delta_r SE_delta_r   T_stat  df #> 1 2000-05-02 0.4354492 2001-05-02 0.5722 0.1367509  0.1224746 1.116565 910 #>          p #> 1 0.264475 test_ref(example3, t = c(\"2000-05-02\", \"2001-05-02\"), r_ref = 0.5) #>            t         r r_ref     delta_r SE_delta_r     T_stat  df         p #> 1 2000-05-02 0.4354492   0.5 -0.06455083 0.10082705 -0.6402134 910 0.5221950 #> 2 2001-05-02 0.5722000   0.5  0.07220003 0.06952644  1.0384542 910 0.2993345 #>   p_adjustment #> 1         none #> 2         none"},{"path":"https://courtiol.github.io/timevarcorr/index.html","id":"devel-corner","dir":"","previous_headings":"","what":"Devel corner","title":"Time Varying Correlation","text":"README file compiled using devtools::build_readme(), following setup:","code":"devtools::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.3.1 (2023-06-16) #>  os       Ubuntu 22.04.3 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language (EN) #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       Europe/Berlin #>  date     2023-11-06 #>  pandoc   3.1.8 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/x86_64/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package     * version date (UTC) lib source #>  cachem        1.0.8   2023-05-01 [4] RSPM (R 4.2.0) #>  callr         3.7.3   2022-11-02 [4] RSPM (R 4.2.0) #>  cli           3.6.1   2023-03-23 [4] RSPM (R 4.2.0) #>  colorspace    2.1-0   2023-01-23 [4] RSPM (R 4.2.0) #>  crayon        1.5.2   2022-09-29 [4] RSPM (R 4.2.0) #>  devtools      2.4.5   2022-10-11 [4] RSPM (R 4.2.0) #>  digest        0.6.33  2023-07-07 [4] RSPM (R 4.2.0) #>  dplyr       * 1.1.3   2023-09-03 [4] RSPM (R 4.3.0) #>  ellipsis      0.3.2   2021-04-29 [4] RSPM (R 4.2.0) #>  evaluate      0.23    2023-11-01 [4] RSPM (R 4.3.0) #>  fansi         1.0.5   2023-10-08 [4] RSPM (R 4.3.0) #>  farver        2.1.1   2022-07-06 [4] RSPM (R 4.2.0) #>  fastmap       1.1.1   2023-02-24 [4] RSPM (R 4.2.0) #>  fs            1.6.3   2023-07-20 [4] RSPM (R 4.2.0) #>  generics      0.1.3   2022-07-05 [4] RSPM (R 4.2.0) #>  ggplot2     * 3.4.4   2023-10-12 [4] RSPM (R 4.3.0) #>  glue          1.6.2   2022-02-24 [4] RSPM (R 4.2.0) #>  gtable        0.3.4   2023-08-21 [4] RSPM (R 4.2.0) #>  highr         0.10    2022-12-22 [4] RSPM (R 4.2.0) #>  htmltools     0.5.6.1 2023-10-06 [4] RSPM (R 4.3.0) #>  htmlwidgets   1.6.2   2023-03-17 [4] RSPM (R 4.2.0) #>  httpuv        1.6.12  2023-10-23 [4] RSPM (R 4.3.0) #>  knitr         1.45    2023-10-30 [4] RSPM (R 4.3.0) #>  labeling      0.4.3   2023-08-29 [4] RSPM (R 4.2.0) #>  later         1.3.1   2023-05-02 [4] RSPM (R 4.2.0) #>  lifecycle     1.0.3   2022-10-07 [4] RSPM (R 4.2.0) #>  magrittr      2.0.3   2022-03-30 [4] RSPM (R 4.2.0) #>  memoise       2.0.1   2021-11-26 [4] RSPM (R 4.2.0) #>  mime          0.12    2021-09-28 [4] RSPM (R 4.2.0) #>  miniUI        0.1.1.1 2018-05-18 [4] RSPM (R 4.2.0) #>  munsell       0.5.0   2018-06-12 [4] RSPM (R 4.2.0) #>  pillar        1.9.0   2023-03-22 [4] RSPM (R 4.2.0) #>  pkgbuild      1.4.2   2023-06-26 [4] RSPM (R 4.2.0) #>  pkgconfig     2.0.3   2019-09-22 [4] RSPM (R 4.2.0) #>  pkgload       1.3.3   2023-09-22 [4] RSPM (R 4.3.0) #>  prettyunits   1.2.0   2023-09-24 [4] RSPM (R 4.3.0) #>  processx      3.8.2   2023-06-30 [4] RSPM (R 4.2.0) #>  profvis       0.3.8   2023-05-02 [4] RSPM (R 4.2.0) #>  promises      1.2.1   2023-08-10 [4] RSPM (R 4.2.0) #>  ps            1.7.5   2023-04-18 [4] RSPM (R 4.3.0) #>  purrr         1.0.2   2023-08-10 [4] RSPM (R 4.2.0) #>  R6            2.5.1   2021-08-19 [4] RSPM (R 4.2.0) #>  Rcpp          1.0.11  2023-07-06 [4] RSPM (R 4.2.0) #>  remotes       2.4.2.1 2023-07-18 [4] RSPM (R 4.2.0) #>  rlang         1.1.1   2023-04-28 [4] RSPM (R 4.2.0) #>  rmarkdown     2.25    2023-09-18 [4] RSPM (R 4.3.0) #>  rstudioapi    0.15.0  2023-07-07 [4] RSPM (R 4.2.0) #>  scales        1.2.1   2022-08-20 [4] RSPM (R 4.2.0) #>  sessioninfo   1.2.2   2021-12-06 [4] RSPM (R 4.2.0) #>  shiny         1.7.5.1 2023-10-14 [4] RSPM (R 4.3.0) #>  stringi       1.7.12  2023-01-11 [4] RSPM (R 4.2.0) #>  stringr       1.5.0   2022-12-02 [4] RSPM (R 4.2.0) #>  tibble        3.2.1   2023-03-20 [4] RSPM (R 4.3.0) #>  tidyselect    1.2.0   2022-10-10 [4] RSPM (R 4.2.0) #>  timevarcorr * 0.1.1   2023-11-06 [1] local #>  urlchecker    1.0.1   2021-11-30 [4] RSPM (R 4.2.0) #>  usethis       2.2.2   2023-07-06 [4] RSPM (R 4.2.0) #>  utf8          1.2.4   2023-10-22 [4] RSPM (R 4.3.0) #>  vctrs         0.6.4   2023-10-12 [4] RSPM (R 4.3.0) #>  withr         2.5.2   2023-10-30 [4] RSPM (R 4.3.0) #>  xfun          0.41    2023-11-01 [4] RSPM (R 4.3.0) #>  xtable        1.8-4   2019-04-21 [4] RSPM (R 4.2.0) #>  yaml          2.3.7   2023-01-23 [4] RSPM (R 4.2.0) #>  #>  [1] /tmp/RtmpZf1Gw1/temp_libpath1049fd45c346be #>  [2] /home/courtiol/R/x86_64-pc-linux-gnu-library/4.3 #>  [3] /usr/local/lib/R/site-library #>  [4] /usr/lib/R/site-library #>  [5] /usr/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://courtiol.github.io/timevarcorr/reference/CI.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal functions for the computation of confidence intervals — CI","title":"Internal functions for the computation of confidence intervals — CI","text":"functions compute different terms required tcor() compute confidence interval around time-varying correlation coefficient. terms defined Choi & Shin (2021).","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/CI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal functions for the computation of confidence intervals — CI","text":"","code":"calc_H(smoothed_obj)  calc_e(smoothed_obj, H)  calc_Gamma(e, l)  calc_GammaINF(e, L)  calc_L_And(e, AR.method = c(\"yule-walker\", \"burg\", \"ols\", \"mle\", \"yw\"))  calc_D(smoothed_obj)  calc_SE(   smoothed_obj,   h,   AR.method = c(\"yule-walker\", \"burg\", \"ols\", \"mle\", \"yw\") )"},{"path":"https://courtiol.github.io/timevarcorr/reference/CI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal functions for the computation of confidence intervals — CI","text":"smoothed_obj object created calc_rho. H object created calc_H. e object created calc_e. l scalar indicating number time points. L scalar indicating bandwidth parameter. AR.method character string specifying method fit autoregressive model used compute \\(\\hat{\\gamma}_1\\) \\(L_{}\\) (see stats::ar details). h scalar indicating bandwidth used smoothing function.","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/CI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal functions for the computation of confidence intervals — CI","text":"calc_H() returns 5 x 5 x \\(t\\) array elements class numeric, corresponds \\(\\hat{H_t}\\) Choi & Shin (2021). calc_e() returns \\(t\\) x 5 matrix elements class numeric storing residuals, corresponds \\(\\hat{e}_t\\) Choi & Shin (2021). calc_Gamma() returns 5 x 5 matrix elements class numeric, corresponds \\(\\hat{\\Gamma}_l\\) Choi & Shin (2021). calc_GammaINF() returns 5 x 5 matrix elements class numeric, corresponds \\(\\hat{\\Gamma}^\\infty\\) Choi & Shin (2021). calc_L_And() returns scalar class numeric, corresponds \\(L_{}\\) Choi & Shin (2021). calc_D() returns \\(t\\) x 5 matrix elements class numeric storing residuals, corresponds \\(D_t\\) Choi & Shin (2021). calc_SE() returns vector length \\(t\\) elements class numeric, corresponds \\(se(\\hat{\\rho}_t(h))\\) Choi & Shin (2021).","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/CI.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Internal functions for the computation of confidence intervals — CI","text":"calc_H(): computes \\(\\hat{H_t}\\) array. \\(\\hat{H_t}\\) component needed compute confidence intervals; \\(H_t\\) defined eq. 6 Choi & Shin (2021). calc_e(): computes \\(\\hat{e}_t\\). \\(\\hat{e}_t\\) defined eq. 9 Choi & Shin (2021). calc_Gamma(): computes \\(\\hat{\\Gamma}_l\\). \\(\\hat{\\Gamma}_l\\) defined eq. 9 Choi & Shin (2021). calc_GammaINF(): computes \\(\\hat{\\Gamma}^\\infty\\). \\(\\hat{\\Gamma}^\\infty\\) long run variance estimator, defined eq. 9 Choi & Shin (2021). calc_L_And(): computes \\(L_{}\\). \\(L_{}\\) defined Choi & Shin (2021, p 342). also corresponds \\(S_T^*\\), eq 5.3 Andrews (1991). calc_D(): computes \\(D_t\\). \\(D_t\\) defined Choi & Shin (2021, p 338). calc_SE(): computes \\(se(\\hat{\\rho}_t(h))\\). standard deviation time-varying correlation (\\(se(\\hat{\\rho}_t(h))\\)) defined eq. 8 Choi & Shin (2021). depends \\(D_{Lt}\\), \\(D_{Mt}\\) & \\(D_{Ut}\\), defined Choi & Shin (2021, p 337 & 339). \\(D_{Xt}\\) terms computed within function since rely components.","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/CI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Internal functions for the computation of confidence intervals — CI","text":"Choi, JE., Shin, D.W. Nonparametric estimation time varying correlation coefficient. J. Korean Stat. Soc. 50, 333–353 (2021). doi:10.1007/s42952-020-00073-6 Andrews, D. W. K. Heteroskedasticity autocorrelation consistent covariance matrix estimation. Econometrica: Journal Econometric Society, 817-858 (1991).","code":""},{"path":[]},{"path":"https://courtiol.github.io/timevarcorr/reference/CI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal functions for the computation of confidence intervals — CI","text":"","code":"rho_obj <- with(na.omit(stockprice),                 calc_rho(x = SP500, y = FTSE100, t = DateID, h = 20, kernel = \"box\")) head(rho_obj) #>              x            y           x2           y2            xy          t #> 1  0.004361280 -0.010096362 1.902076e-05 1.019365e-04 -4.403306e-05 2000-04-03 #> 2 -0.007980069 -0.003332639 6.368150e-05 1.110648e-05  2.659469e-05 2000-04-04 #> 3 -0.004479051 -0.007449493 2.006189e-05 5.549494e-05  3.336666e-05 2000-04-05 #> 4  0.008375645  0.011874107 7.015143e-05 1.409944e-04  9.945331e-05 2000-04-06 #> 5  0.009697455  0.015107515 9.404064e-05 2.282370e-04  1.465045e-04 2000-04-07 #> 6 -0.007420214 -0.004377977 5.505958e-05 1.916668e-05  3.248553e-05 2000-04-10 #>     x_smoothed   y_smoothed  x2_smoothed  y2_smoothed  xy_smoothed #> 1 -0.002369705 -0.003425687 7.493522e-05 0.0001296218 4.822802e-05 #> 2 -0.008177062 -0.005608043 4.327807e-04 0.0001804120 1.960199e-04 #> 3 -0.008177062 -0.005608043 4.327807e-04 0.0001804120 1.960199e-04 #> 4 -0.008177062 -0.005608043 4.327807e-04 0.0001804120 1.960199e-04 #> 5 -0.004666980 -0.006882863 4.776387e-04 0.0001990454 1.238864e-04 #> 6 -0.002107705 -0.003205704 4.367050e-04 0.0001841147 1.015342e-04 #>   sd_x_smoothed sd_y_smoothed rho_smoothed #> 1   0.008325846    0.01085755    0.4437047 #> 2   0.019128940    0.01220499    0.6431811 #> 3   0.019128940    0.01220499    0.6431811 #> 4   0.019128940    0.01220499    0.6431811 #> 5   0.021350832    0.01231550    0.3489847 #> 6   0.020790924    0.01318477    0.3457474  ## Computing \\eqn{\\hat{H_t}}  H <- calc_H(smoothed_obj = rho_obj) H[, , 1:2] # H array for the first two time points #> , , 1 #>  #>               [,1]          [,2]        [,3]        [,4]          [,5] #> [1,] -3.945960e-05 -3.300682e-05 0.008325846 0.004817547 -3.993791e-05 #> [2,]  0.000000e+00 -6.666556e-05 0.000000000 0.009730246 -2.305781e-05 #> [3,]  6.931972e-05  2.320876e-05 0.000000000 0.000000000  4.011015e-05 #> [4,]  0.000000e+00 -9.467769e-05 0.000000000 0.000000000  0.000000e+00 #> [5,]  0.000000e+00  9.375183e-05 0.000000000 0.000000000  8.101253e-05 #>  #> , , 2 #>  #>               [,1]          [,2]       [,3]        [,4]          [,5] #> [1,] -0.0003128371 -8.804651e-05 0.01912894 0.007850022 -1.714660e-04 #> [2,]  0.0000000000 -1.048203e-04 0.00000000 0.009345535 -7.641902e-05 #> [3,]  0.0003659163  6.162284e-05 0.00000000 0.000000000  1.501626e-04 #> [4,]  0.0000000000 -8.733903e-05 0.00000000 0.000000000  0.000000e+00 #> [5,]  0.0000000000  1.467253e-04 0.00000000 0.000000000  1.787702e-04 #>   ## Computing \\eqn{\\hat{e}_t}  e <- calc_e(smoothed_obj = rho_obj, H = H) head(e) # e matrix for the first six time points #>         x2_resid      y2_resid    x_resid    y_resid      xy_resid #> [1,]  0.80844454 -1.0858300496 -0.3464174 -0.1790269 -0.8778333739 #> [2,]  0.01029819  0.2348247345 -0.9998939  0.9448573  0.0024182690 #> [3,]  0.19332027 -0.3594249430 -0.9626273  0.8708137 -0.0694841264 #> [4,]  0.86532278  1.1437918620 -0.2512165 -0.3082598  0.9897491561 #> [5,]  0.67278103  1.6548373386 -0.5473657 -1.7384866  1.1133431705 #> [6,] -0.25552057 -0.0006027114 -0.9347092  0.9999996  0.0001540051  ## Computing \\eqn{\\hat{\\Gamma}_l}  calc_Gamma(e = e, l = 3) #>             x2_resid    y2_resid      x_resid       y_resid     xy_resid #> x2_resid -0.08426588  0.00120430 -0.016571795 -0.0486144700 -0.028603802 #> y2_resid  0.02366280 -0.09087723 -0.036021416 -0.0104226203  0.003046219 #> x_resid   0.03505289  0.02239173 -0.130886043  0.0113781767  0.008721415 #> y_resid  -0.00935183 -0.01810924 -0.002669087 -0.1306788327 -0.026723552 #> xy_resid -0.01353423 -0.01153453 -0.009324456 -0.0003183333 -0.059677907  ## Computing \\eqn{\\hat{\\Gamma}^\\infty}  calc_GammaINF(e = e, L = 2) #>             x2_resid    y2_resid      x_resid    y_resid     xy_resid #> x2_resid  0.89131796  0.03994933 -0.045481299 0.01885230  0.022464392 #> y2_resid  0.03994933  0.87487207 -0.016957014 0.04726965 -0.013540548 #> x_resid  -0.04548130 -0.01695701  1.574267210 0.07364551  0.003709538 #> y_resid   0.01885230  0.04726965  0.073645507 1.61624702  0.036153472 #> xy_resid  0.02246439 -0.01354055  0.003709538 0.03615347  0.819391952  ## Computing \\eqn{L_{And}}  calc_L_And(e = e) #> [1] 6.097187 sapply(c(\"yule-walker\", \"burg\", \"ols\", \"mle\", \"yw\"),        function(m) calc_L_And(e = e, AR.method = m)) ## comparing AR.methods #> yule-walker        burg         ols         mle          yw  #>    6.097187    6.097427    6.097239    6.096643    6.097187   ## Computing \\eqn{D_t}  D <- calc_D(smoothed_obj = rho_obj) head(D) # D matrix for the first six time points #>            [,1]       [,2]      [,3]      [,4]      [,5] #> [1,] -3200.4218 -1881.9156 22.727368 13.320330 11062.153 #> [2,]  -878.8636 -2158.8784  9.647499 10.810085  4283.231 #> [3,]  -878.8636 -2158.8784  9.647499 10.810085  4283.231 #> [4,]  -878.8636 -2158.8784  9.647499 10.810085  4283.231 #> [5,]  -382.7778 -1150.4619 22.603106  1.911857  3803.059 #> [6,]  -399.9275  -994.4519 10.008519  1.313051  3647.990  ## Computing \\eqn{se(\\hat{\\rho}_t(h))} # nb: takes a few seconds to run  run <- FALSE ## change to TRUE to run the example if (in_pkgdown() || run) {  SE <- calc_SE(smoothed_obj = rho_obj, h = 50) head(SE) # SE vector for the first six time points  } #> [1] 0.09718916 0.07043209 0.06966624 0.06889940 0.10133594 0.10045678"},{"path":"https://courtiol.github.io/timevarcorr/reference/dot-onAttach.html","id":null,"dir":"Reference","previous_headings":"","what":"Display welcome message — .onAttach","title":"Display welcome message — .onAttach","text":"function called user. displays message package loaded.","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/dot-onAttach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display welcome message — .onAttach","text":"","code":".onAttach(libname, pkgname)"},{"path":"https://courtiol.github.io/timevarcorr/reference/dot-onAttach.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display welcome message — .onAttach","text":"libname argument needed automatically defined. pkgname argument needed automatically defined.","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/dot-onAttach.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display welcome message — .onAttach","text":"nothing (invisible NULL).","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/in_pkgdown.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if the package is being used by pkgdown — in_pkgdown","title":"Determine if the package is being used by pkgdown — in_pkgdown","text":"function called user. allows run examples conditionally used pkgdown. Code copied pkgdown::in_pkgdown().","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/in_pkgdown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if the package is being used by pkgdown — in_pkgdown","text":"","code":"in_pkgdown()"},{"path":"https://courtiol.github.io/timevarcorr/reference/in_pkgdown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if the package is being used by pkgdown — in_pkgdown","text":"logical value (TRUE FALSE).","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/kern_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Smoothing by kernel regression — kern_smooth","title":"Smoothing by kernel regression — kern_smooth","text":"function perform smoothing time-series non-parametric kernel regression.","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/kern_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smoothing by kernel regression — kern_smooth","text":"","code":"kern_smooth(   x,   t = seq_along(x),   h,   t.for.pred = t,   kernel = c(\"epanechnikov\", \"box\", \"normal\"),   param_smoother = list(),   output = c(\"dataframe\", \"list\") )"},{"path":"https://courtiol.github.io/timevarcorr/reference/kern_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smoothing by kernel regression — kern_smooth","text":"x numeric vector series smoothed. t (numeric Date) vector time points. missing, observations considered correspond sequential time steps (.e., 1, 2 ...). h scalar indicating bandwidth used smoothing function. t..pred (numeric Date) vector time points evaluate smoothed fit. missing, t used. kernel character string indicating kernel use: \"epanechnikov\" (default), \"box\", \"normal\" (abbreviations also work). param_smoother list additional parameters provide internal smoothing function (see Details). output character string indicating output \"dataframe\" (default) list (faster computation function called repeatedly).","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/kern_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smoothing by kernel regression — kern_smooth","text":"dataframe time points (t..pred) corresponding fitted values.","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/kern_smooth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Smoothing by kernel regression — kern_smooth","text":"function essentially wrapper calls different underlying functions depending kernel selected: lpridge::lpepa() \"epanechnikov\". stats::ksmooth() \"normal\" \"box\". argument param_smoother can used pass additional arguments functions.","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/kern_smooth.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Smoothing by kernel regression — kern_smooth","text":"short post found useful: http://users.stat.umn.edu/~helwig/notes/smooth-notes.html","code":""},{"path":[]},{"path":"https://courtiol.github.io/timevarcorr/reference/kern_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smoothing by kernel regression — kern_smooth","text":"","code":"## Smooth 10 first values of a vector  kern_smooth(stockprice$DAX[1:20], h = 5) #>     t             x #> 1   1 -0.0142344629 #> 2   2 -0.0080248366 #> 3   3 -0.0043075061 #> 4   4 -0.0025564727 #> 5   5 -0.0013302414 #> 6   6 -0.0020000346 #> 7   7 -0.0037240350 #> 8   8 -0.0038831231 #> 9   9 -0.0052112887 #> 10 10 -0.0055894783 #> 11 11 -0.0051979756 #> 12 12 -0.0040618781 #> 13 13 -0.0007538746 #> 14 14  0.0021554236 #> 15 15  0.0022715116 #> 16 16  0.0037383564 #> 17 17  0.0048464190 #> 18 18  0.0063879240 #> 19 19  0.0073951470 #> 20 20  0.0089770700   ## Prediction at time step 2 and 3  kern_smooth(stockprice$DAX, h = 1, t.for.pred = c(2, 3)) #>   t           x #> 1 2  0.01490435 #> 2 3 -0.02550618   ## Smoothing using a vector of dates for time  kern_smooth(x = stockprice$DAX[1:10], t = stockprice$DateID[1:10], h = 5) #>             t             x #> 1  2000-04-03 -0.0142344629 #> 2  2000-04-04 -0.0083542527 #> 3  2000-04-05 -0.0027355458 #> 4  2000-04-06 -0.0003472332 #> 5  2000-04-07 -0.0005866131 #> 6  2000-04-10 -0.0006515250 #> 7  2000-04-11 -0.0039680278 #> 8  2000-04-12 -0.0072967854 #> 9  2000-04-13 -0.0125126832 #> 10 2000-04-14 -0.0190363342   ## Smoothing conserves original order  kern_smooth(x = stockprice$DAX[10:1], t = stockprice$DateID[10:1], h = 5) #>             t             x #> 1  2000-04-14 -0.0190363342 #> 2  2000-04-13 -0.0125126832 #> 3  2000-04-12 -0.0072967854 #> 4  2000-04-11 -0.0039680278 #> 5  2000-04-10 -0.0006515250 #> 6  2000-04-07 -0.0005866131 #> 7  2000-04-06 -0.0003472332 #> 8  2000-04-05 -0.0027355458 #> 9  2000-04-04 -0.0083542527 #> 10 2000-04-03 -0.0142344629   ## Effect of the bandwidth  plot(stockprice$DAX[1:100] ~ stockprice$DateID[1:100],      las = 1, ylab = \"DAX index\", xlab = \"Date\") points(kern_smooth(stockprice$DAX[1:100], stockprice$DateID[1:100], h = 1),        type = \"l\", col = \"grey\") points(kern_smooth(stockprice$DAX[1:100], stockprice$DateID[1:100], h = 3),        type = \"l\", col = \"blue\") points(kern_smooth(stockprice$DAX[1:100], stockprice$DateID[1:100], h = 10),        type = \"l\", col = \"red\") legend(\"topright\", fill = c(\"grey\", \"blue\", \"red\"),        legend = c(\"1\", \"3\", \"10\"), bty = \"n\", title = \"Bandwidth (h)\")    ## Effect of the kernel  plot(stockprice$DAX[1:100] ~ stockprice$DateID[1:100],      las = 1, ylab = \"DAX index\", xlab = \"Date\") points(kern_smooth(stockprice$DAX[1:100], stockprice$DateID[1:100], h = 10),        type = \"l\", col = \"orange\") points(kern_smooth(stockprice$DAX[1:100], stockprice$DateID[1:100], h = 10, kernel = \"box\"),        type = \"l\", col = \"blue\") points(kern_smooth(stockprice$DAX[1:100], stockprice$DateID[1:100], h = 10, kernel = \"norm\"),        type = \"l\", col = \"red\") legend(\"topright\", fill = c(\"orange\", \"blue\", \"red\"),        legend = c(\"epanechnikov\", \"box\", \"normal\"), bty = \"n\", title = \"Kernel method\")"},{"path":"https://courtiol.github.io/timevarcorr/reference/stockprice.html","id":null,"dir":"Reference","previous_headings":"","what":"Daily Closing Prices of Major European Stock Indices, April 2000--December 2017 — stockprice","title":"Daily Closing Prices of Major European Stock Indices, April 2000--December 2017 — stockprice","text":"dataset containing stockmarket returns 2000-04-03 2017-12-05. dataset close one used Choi & Shin (2021), although strictly identical. produced Oxford-Man Institute Quantitative Finance.","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/stockprice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daily Closing Prices of Major European Stock Indices, April 2000--December 2017 — stockprice","text":"","code":"stockprice"},{"path":"https://courtiol.github.io/timevarcorr/reference/stockprice.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Daily Closing Prices of Major European Stock Indices, April 2000--December 2017 — stockprice","text":"data frame 4618 rows 7 variables: DateID vector Date. SP500 numeric vector stockmarket return S&P 500 Index. FTSE100 numeric vector stockmarket return FTSE 100. Nikkei numeric vector stockmarket return Nikkei 225. DAX numeric vector stockmarket return German stock index. NASDAQ numeric vector stockmarket return Nasdaq Stock Market. Event character string particular events impacted stockmarket, Choi & Shin (2021).","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/stockprice.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Daily Closing Prices of Major European Stock Indices, April 2000--December 2017 — stockprice","text":"file downloaded \"Oxford-Man Institute's realized library\", longer exists. time, raw data file named \"oxfordmanrealizedvolatilityindices-0.2-final.zip\".","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/stockprice.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Daily Closing Prices of Major European Stock Indices, April 2000--December 2017 — stockprice","text":"Heber, Gerd, Asger Lunde, Neil Shephard Kevin Sheppard (2009) \"Oxford-Man Institute's realized library\", Oxford-Man Institute, University Oxford. Choi, JE., Shin, D.W. Nonparametric estimation time varying correlation coefficient. J. Korean Stat. Soc. 50, 333–353 (2021). doi:10.1007/s42952-020-00073-6","code":""},{"path":[]},{"path":"https://courtiol.github.io/timevarcorr/reference/tcor.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute time varying correlation coefficients — tcor","title":"Compute time varying correlation coefficients — tcor","text":"function tcor() implements (together helper function calc_rho()) nonparametric estimation time varying correlation coefficient proposed Choi & Shin (2021). general idea compute (Pearson) correlation coefficient (\\(r(x,y) = \\frac{\\hat{xy} - \\hat{x}\\times\\hat{y}}{ \\sqrt{\\hat{x^2}-\\hat{x}^2} \\times \\sqrt{\\hat{y^2}-\\hat{y}^2}}\\)), instead using means required computation, component (.e., \\(x\\), \\(y\\), \\(x^2\\), \\(y^2\\), \\(x \\times y\\)) smoothed smoothed terms considered place original means. intensity smoothing depends unique parameter: bandwidth (h). h = Inf, method produces original (.e., time-invariant) correlation value. smaller parameter h, variation time captured. parameter h can provided user; otherwise automatically estimated internal helper functions select_h() calc_RMSE() (see Details).","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/tcor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute time varying correlation coefficients — tcor","text":"","code":"tcor(   x,   y,   t = seq_along(x),   h = NULL,   cor.method = c(\"pearson\", \"spearman\"),   kernel = c(\"epanechnikov\", \"box\", \"normal\"),   CI = FALSE,   CI.level = 0.95,   param_smoother = list(),   keep.missing = FALSE,   verbose = FALSE )  calc_rho(   x,   y,   t = seq_along(x),   t.for.pred = t,   h,   cor.method = c(\"pearson\", \"spearman\"),   kernel = c(\"epanechnikov\", \"box\", \"normal\"),   param_smoother = list() )  calc_RMSE(   h,   x,   y,   t = seq_along(x),   cor.method = c(\"pearson\", \"spearman\"),   kernel = c(\"epanechnikov\", \"box\", \"normal\"),   param_smoother = list(),   verbose = FALSE )  select_h(   x,   y,   t = seq_along(x),   cor.method = c(\"pearson\", \"spearman\"),   kernel = c(\"epanechnikov\", \"box\", \"normal\"),   param_smoother = list(),   verbose = FALSE )"},{"path":"https://courtiol.github.io/timevarcorr/reference/tcor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute time varying correlation coefficients — tcor","text":"x numeric vector. y numeric vector correlated x. t (numeric Date) vector time points. missing, observations considered correspond sequential time steps (.e., 1, 2 ...). h scalar indicating bandwidth used smoothing function. cor.method character string indicating correlation coefficient computed (\"pearson\", default; \"spearman\"). kernel character string indicating kernel use: \"epanechnikov\" (default), \"box\", \"normal\" (abbreviations also work). CI logical specifying confidence interval computed (default = FALSE). CI.level scalar defining level CI (default = 0.95 95% CI). param_smoother list additional parameters provide internal smoothing function (see Details). keep.missing logical specifying time points associated missing information kept output (default = FALSE facilitate plotting). verbose logical specifying information displayed monitor progress cross validation (default = FALSE). t..pred (numeric Date) vector time points evaluate smoothed fit. missing, t used.","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/tcor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute time varying correlation coefficients — tcor","text":"---Output tcor()--- 2 x \\(t\\) dataframe containing: time points (t). estimates correlation value (r). , CI = TRUE, 5 x \\(t\\) dataframe containing: time points (t). estimates correlation value (r). Standard Error (SE). lower boundary confidence intervals (lwr). upper boundary confidence intervals (upr). metadata also attached dataframe (attributes): call function (call). argument CI. bandwidth parameter (h). method used select h (h_selection). minimal root mean square error h selected (RMSE). computing time (seconds) spent select bandwidth parameter (h_selection_duration) h automatically selected. ---Output calc_rho()--- 14 x \\(t\\) dataframe : six raw components correlation (x, y, x2, y2, xy). time points (t). six raw components correlation smoothing (x_smoothed, y_smoothed, x2_smoothed, y2_smoothed, xy_smoothed). standard deviation around \\(x\\) \\(y\\) (sd_x_smoothed, sd_y_smoothed). smoothed correlation coefficient (rho_smoothed). ---Output calc_RMSE()--- scalar class numeric corresponding RMSE. ---Output select_h()--- list following components: selected bandwidth parameter (h). method used select h (h_selection). minimal root mean square error h selected (RMSE). computing time (seconds) spent select bandwidth parameter (time).","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/tcor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute time varying correlation coefficients — tcor","text":"Smoothing: smoothing component performed kernel regression. default use Epanechnikov kernel following Choi & Shin (2021), kernels also implemented can thus alternatively used (see kern_smooth() details). normal kernel seems sometimes lead small bandwidth selected, default kernel can lead numerical issues (see next point). thus recommend always comparing results different kernel methods. Numerical issues: numerical issues can happen smoothing performed independently component correlation coefficient. consequence, relationship components may become violated time points. instance, square smoothed \\(x\\) term gets larger smoothed \\(x^2\\) term, variance \\(x\\) become negative. cases, coefficient values returned NA. Bandwidth selection: value used define bandwidth (h) tcor() set NULL (default), internal function select_h() used select optimal value h. first estimated leave-one-cross validation (using internally calc_RMSE()). cross validation error (RMSE) minimal maximal value h considered (\\(8\\sqrt{N}\\)), rather taking optimal h value, bandwidth becomes estimated using -called elbow criterion. latter method identifies value h cross validation error decreasing little. procedure detailed section 2.1 Choi & Shin (2021). Parallel computation: h provided, automatic bandwidth selection occurs (see ). large datasets, step can computationally demanding. current implementation thus relies parallel::mclapply() thus effective Linux MacOS. Relying parallel processing also implies call options(\"mc.cores\" = XX) beforehand, replacing XX relevant number CPU cores want use (see Examples). debugging, use options(\"mc.cores\" = 1), otherwise may able see error messages generated child nodes. Confidence interval: CI set TRUE, confidence interval calculated described Choi & Shin (2021). also necessary using test_equality() test differences correlations two time points. computation confidence intervals involves multiple internal functions (see CI details).","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/tcor.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Compute time varying correlation coefficients — tcor","text":"tcor(): user-level function used. calc_rho(): computes correlation given bandwidth. function calls kernel smoothing procedure component required compute time-varying correlation. calc_RMSE(): Internal function computing root mean square error (RMSE) given bandwidth. function removes time point one one predicts correlation missing time point based time points. computes returns RMSE predicted correlation one predicted using full dataset. See also Bandwidth selection Parallel computation Details. select_h(): Internal function selecting optimal bandwidth parameter h. function selects returns optimal bandwidth parameter h using optimizer (stats::optimize()) searches h value associated smallest RMSE returned calc_RMSE(). See also Bandwidth selection Details.","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/tcor.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute time varying correlation coefficients — tcor","text":"Choi, JE., Shin, D.W. Nonparametric estimation time varying correlation coefficient. J. Korean Stat. Soc. 50, 333–353 (2021). doi:10.1007/s42952-020-00073-6","code":""},{"path":[]},{"path":"https://courtiol.github.io/timevarcorr/reference/tcor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute time varying correlation coefficients — tcor","text":"","code":"##################################################### ## Examples for the user-level function to be used ## #####################################################  ## Effect of the bandwidth  res_h50   <- with(stockprice, tcor(x = SP500, y = FTSE100, t = DateID, h = 50)) res_h100  <- with(stockprice, tcor(x = SP500, y = FTSE100, t = DateID, h = 100)) res_h200  <- with(stockprice, tcor(x = SP500, y = FTSE100, t = DateID, h = 200)) plot(res_h50, type = \"l\", ylab = \"Cor\", xlab = \"Time\", las = 1, col = \"grey\") points(res_h100, type = \"l\", col = \"blue\") points(res_h200, type = \"l\", col = \"red\") legend(\"bottom\", horiz = TRUE, fill = c(\"grey\", \"blue\", \"red\"),        legend = c(\"50\", \"100\", \"200\"), bty = \"n\", title = \"Bandwidth (h)\")    ## Effect of the correlation method  res_pearson  <- with(stockprice, tcor(x = SP500, y = FTSE100, t = DateID, h = 150)) res_spearman <- with(stockprice, tcor(x = SP500, y = FTSE100, t = DateID, h = 150,                                       cor.method = \"spearman\")) plot(res_pearson, type = \"l\", ylab = \"Cor\", xlab = \"Time\", las = 1) points(res_spearman, type = \"l\", col = \"blue\") legend(\"bottom\", horiz = TRUE, fill = c(\"black\", \"blue\"),        legend = c(\"pearson\", \"spearman\"), bty = \"n\", title = \"cor.method\")    ## Infinite bandwidth should match fixed correlation coefficients ## nb: `h = Inf` is not supported by default kernel (`kernel = 'epanechnikov'`)  res_pearson_hInf  <- with(stockprice, tcor(x = SP500, y = FTSE100, t = DateID, h = Inf,                                            kernel = \"normal\")) res_spearman_hInf <- with(stockprice, tcor(x = SP500, y = FTSE100, t = DateID, h = Inf,                                            kernel = \"normal\", cor.method = \"spearman\")) r <- cor(stockprice$SP500, stockprice$FTSE100, use = \"pairwise.complete.obs\") rho <- cor(stockprice$SP500, stockprice$FTSE100, method = \"spearman\", use = \"pairwise.complete.obs\") round(unique(res_pearson_hInf$r) - r, digits = 3) ## 0 indicates near equality #> [1] 0 round(unique(res_spearman_hInf$r) - rho, digits = 3) ## 0 indicates near equality #> [1] 0   ## Computing and plotting the confidence interval  res_withCI <- with(stockprice, tcor(x = SP500, y = FTSE100, t = DateID, h = 200, CI = TRUE)) with(res_withCI, {      plot(r ~ t, type = \"l\", ylab = \"Cor\", xlab = \"Time\", las = 1, ylim = c(0, 1))      points(lwr ~ t, type = \"l\", lty = 2)      points(upr ~ t, type = \"l\", lty = 2)})    ## Same using tidyverse packages (dplyr and ggplot2 must be installed) ## see https://github.com/courtiol/timevarcorr for more examples of this kind  if (require(\"dplyr\", warn.conflicts = FALSE)) {    stockprice |>     reframe(tcor(x = SP500, y = FTSE100, t = DateID,                  h = 200, CI = TRUE)) -> res_tidy   res_tidy } #> Loading required package: dplyr #> # A tibble: 4,326 × 5 #>    t              r     SE   lwr   upr #>    <date>     <dbl>  <dbl> <dbl> <dbl> #>  1 2000-04-03 0.453 0.0823 0.292 0.615 #>  2 2000-04-04 0.453 0.0821 0.292 0.614 #>  3 2000-04-05 0.453 0.0819 0.293 0.614 #>  4 2000-04-06 0.453 0.0817 0.293 0.613 #>  5 2000-04-07 0.453 0.0815 0.294 0.613 #>  6 2000-04-10 0.453 0.0813 0.294 0.612 #>  7 2000-04-11 0.453 0.0811 0.294 0.612 #>  8 2000-04-12 0.452 0.0809 0.294 0.611 #>  9 2000-04-13 0.452 0.0807 0.294 0.610 #> 10 2000-04-14 0.452 0.0805 0.294 0.610 #> # ℹ 4,316 more rows  if (require(\"ggplot2\")) {    ggplot(res_tidy) +      aes(x = t, y = r, ymin = lwr, ymax = upr) +      geom_ribbon(fill = \"grey\") +      geom_line() +      labs(title = \"SP500 vs FTSE100\", x = \"Time\", y = \"Correlation\") +      theme_classic()  } #> Loading required package: ggplot2    ## Automatic selection of the bandwidth using parallel processing and comparison ## of the 3 alternative kernels on the first 500 time points of the dataset # nb: takes a few seconds to run, so not run by default  run <- in_pkgdown() || FALSE ## change to TRUE to run the example if (run) {  options(\"mc.cores\" = 2L) ## CPU cores to be used for parallel processing  res_hauto_epanech <- with(stockprice[1:500, ],          tcor(x = SP500, y = FTSE100, t = DateID, kernel = \"epanechnikov\")          )  res_hauto_box <- with(stockprice[1:500, ],           tcor(x = SP500, y = FTSE100, t = DateID, kernel = \"box\")           )  res_hauto_norm <- with(stockprice[1:500, ],           tcor(x = SP500, y = FTSE100, t = DateID, kernel = \"norm\")           )  plot(res_hauto_epanech, type = \"l\", col = \"red\",      ylab = \"Cor\", xlab = \"Time\", las = 1, ylim = c(0, 1)) points(res_hauto_box, type = \"l\", col = \"grey\") points(res_hauto_norm, type = \"l\", col = \"orange\") legend(\"top\", horiz = TRUE, fill = c(\"red\", \"grey\", \"orange\"),        legend = c(\"epanechnikov\", \"box\", \"normal\"), bty = \"n\",        title = \"Kernel\")  } #> h selected using LOO-CV = 57.3 #> Bandwidth automatic selection completed in 5.9 seconds #> h selected using LOO-CV = 75.6 #> Bandwidth automatic selection completed in 8.8 seconds #> h selected using LOO-CV = 60.9 #> Bandwidth automatic selection completed in 8.7 seconds    ## Comparison of the 3 alternative kernels under same bandwidth ## nb: it requires to have run the previous example  if (run) {  res_epanech <- with(stockprice[1:500, ],           tcor(x = SP500, y = FTSE100, t = DateID,           kernel = \"epanechnikov\", h = attr(res_hauto_epanech, \"h\"))           )  res_box <- with(stockprice[1:500, ],            tcor(x = SP500, y = FTSE100, t = DateID,            kernel = \"box\", h = attr(res_hauto_epanech, \"h\"))            )  res_norm <- with(stockprice[1:500, ],           tcor(x = SP500, y = FTSE100, t = DateID,           kernel = \"norm\", h = attr(res_hauto_epanech, \"h\"))           )  plot(res_epanech, type = \"l\", col = \"red\", ylab = \"Cor\", xlab = \"Time\",      las = 1, ylim = c(0, 1)) points(res_box, type = \"l\", col = \"grey\") points(res_norm, type = \"l\", col = \"orange\") legend(\"top\", horiz = TRUE, fill = c(\"red\", \"grey\", \"orange\"),        legend = c(\"epanechnikov\", \"box\", \"normal\"), bty = \"n\",        title = \"Kernel\")  }   ## Automatic selection of the bandwidth using parallel processing with CI # nb: takes a few seconds to run, so not run by default  run <- in_pkgdown() || FALSE ## change to TRUE to run the example if (run) {  res_hauto_epanechCI <- with(stockprice[1:500, ],           tcor(x = SP500, y = FTSE100, t = DateID, CI = TRUE)           )  plot(res_hauto_epanechCI[, c(\"t\", \"r\")], type = \"l\", col = \"red\",      ylab = \"Cor\", xlab = \"Time\", las = 1, ylim = c(0, 1)) points(res_hauto_epanechCI[, c(\"t\", \"lwr\")], type = \"l\", col = \"red\", lty = 2) points(res_hauto_epanechCI[, c(\"t\", \"upr\")], type = \"l\", col = \"red\", lty = 2)  } #> h selected using LOO-CV = 57.3 #> Bandwidth automatic selection completed in 6 seconds    ## Not all kernels work well in all situations ## Here the default kernell estimation leads to issues for last time points ## nb1: EuStockMarkets is a time-series object provided with R ## nb2: takes a few minutes to run, so not run by default  run <- in_pkgdown() || FALSE ## change to TRUE to run the example if (run) {  EuStock_epanech <- tcor(EuStockMarkets[1:500, \"DAX\"], EuStockMarkets[1:500, \"SMI\"]) EuStock_norm <- tcor(EuStockMarkets[1:500, \"DAX\"], EuStockMarkets[1:500, \"SMI\"], kernel = \"normal\")  plot(EuStock_epanech, type = \"l\", col = \"red\", las = 1, ylim = c(-1, 1)) points(EuStock_norm, type = \"l\", col = \"orange\", lty = 2) legend(\"bottom\", horiz = TRUE, fill = c(\"red\", \"orange\"),        legend = c(\"epanechnikov\", \"normal\"), bty = \"n\",        title = \"Kernel\") } #> h selected using LOO-CV = 71.7 #> Bandwidth automatic selection completed in 4.5 seconds #>  #> Numerical issues occured when computing the correlation values for the bandwidth value h = 71.7 resulting in `NA`(s) (see Details on *Numerical issues* in `?tcor`). #>  You may want to: #>  - try another bandwidth value using the argument `h` #>  - try another kernel using the argument `kernel` #>  - adjust the smoothing parameters using the argument `param_smoother` (see `?kern_smooth`). #>  This may not be an issue, if you are estimating `h` automatically, as issues may occur only for sub-optimal bandwidth values. #> Warning: 1 out of 500 correlation values were estimated out of the [-1, 1] range and where thus forced to [-1, 1]. Using another kernel may avoid such problem. #> h selected using LOO-CV = 178.3 #> h selected using elbow criterion = 54 #> Bandwidth automatic selection completed in 17.9 seconds      ################################################################## ## Examples for the internal function computing the correlation ## ##################################################################  ## Computing the correlation and its component for the first six time points  with(head(stockprice), calc_rho(x = SP500, y = FTSE100, t = DateID, h = 20)) #>              x            y           x2           y2            xy          t #> 1  0.004361280 -0.010096362 1.902076e-05 1.019365e-04 -4.403306e-05 2000-04-03 #> 2 -0.007980069 -0.003332639 6.368150e-05 1.110648e-05  2.659469e-05 2000-04-04 #> 3 -0.004479051 -0.007449493 2.006189e-05 5.549494e-05  3.336666e-05 2000-04-05 #> 4  0.008375645  0.011874107 7.015143e-05 1.409944e-04  9.945331e-05 2000-04-06 #> 5  0.009697455  0.015107515 9.404064e-05 2.282370e-04  1.465045e-04 2000-04-07 #> 6 -0.007420214 -0.004377977 5.505958e-05 1.916668e-05  3.248553e-05 2000-04-10 #>      x_smoothed    y_smoothed  x2_smoothed  y2_smoothed  xy_smoothed #> 1  0.0013418481 -0.0039462414 3.798239e-05 8.905361e-05 1.271878e-05 #> 2  0.0010704776 -0.0023441914 4.372446e-05 9.103955e-05 2.628156e-05 #> 3  0.0007590436 -0.0008249469 4.930863e-05 9.252018e-05 3.927963e-05 #> 4  0.0004106755  0.0006175389 5.474643e-05 9.353427e-05 5.175352e-05 #> 5  0.0000271654  0.0019865563 6.004416e-05 9.410375e-05 6.372498e-05 #> 6 -0.0013336726  0.0056494153 7.509061e-05 9.314396e-05 9.659432e-05 #>   sd_x_smoothed sd_y_smoothed rho_smoothed #> 1   0.006015134   0.008572093    0.3493645 #> 2   0.006525224   0.009249017    0.4770515 #> 3   0.006980866   0.009583300    0.5965016 #> 4   0.007387678   0.009651576    0.7222712 #> 5   0.007748769   0.009495122    0.8653833 #> 6   0.008562239   0.007824836    1.5542048   ## Predicting the correlation and its component at a specific time point  with(head(stockprice), calc_rho(x = SP500, y = FTSE100, t = DateID, h = 20,      t.for.pred = DateID[1])) #>            x           y           x2           y2            xy          t #> 1 0.00436128 -0.01009636 1.902076e-05 0.0001019365 -4.403306e-05 2000-04-03 #>    x_smoothed   y_smoothed  x2_smoothed  y2_smoothed  xy_smoothed sd_x_smoothed #> 1 0.001341848 -0.003946241 3.798239e-05 8.905361e-05 1.271878e-05   0.006015134 #>   sd_y_smoothed rho_smoothed #> 1   0.008572093    0.3493645   ## The function can handle non consecutive time points  set.seed(1) calc_rho(x = rnorm(10), y = rnorm(10), t = c(1:5, 26:30), h = 3, kernel = \"box\") #>             x           y         x2           y2           xy  t x_smoothed #> 1  -0.6264538  1.51178117 0.39244438 2.2854823013 -0.947061074  1 -0.2214052 #> 2   0.1836433  0.38984324 0.03372487 0.1519777490  0.071592108  2 -0.4261464 #> 3  -0.8356286 -0.62124058 0.69827518 0.3859398589  0.519126404  3  0.3144318 #> 4   1.5952808 -2.21469989 2.54492084 4.9048955903 -3.533068213  4  0.3630533 #> 5   0.3295078  1.12493092 0.10857537 1.2654695706  0.370673480  5  0.9623943 #> 6  -0.8204684 -0.04493361 0.67316837 0.0020190292  0.036866606 26 -0.1665197 #> 7   0.4874291 -0.01619026 0.23758708 0.0002621246 -0.007891605 27  0.1350951 #> 8   0.7383247  0.94383621 0.54512337 0.8908267926  0.696857592 28  0.6005117 #> 9   0.5757814  0.82122120 0.33152416 0.6744042513  0.472843850 29  0.3362392 #> 10 -0.3053884  0.59390132 0.09326207 0.3527187793 -0.181370567 30  0.1351965 #>     y_smoothed x2_smoothed y2_smoothed xy_smoothed sd_x_smoothed sd_y_smoothed #> 1   0.95081220   0.2130846 1.218730025  -0.4377345     0.4050486    0.56096897 #> 2   0.42679461   0.3748148 0.941133303  -0.1187809     0.4395612    0.87119439 #> 3  -0.81536574   1.0923070 1.814271066  -0.9807832     0.9967144    1.07212395 #> 4  -0.57033652   1.1172571 2.185435007  -0.8810894     0.9926980    1.36387362 #> 5  -0.54488448   1.3267481 3.085182580  -1.5811974     0.6328865    1.66981540 #> 6  -0.03056194   0.4553777 0.001140577   0.0144875     0.6539487    0.01437167 #> 7   0.29423745   0.4852929 0.297702649   0.2419442     0.6834049    0.45948555 #> 8   0.58295571   0.3714115 0.521831056   0.3872699     0.1039097    0.42660719 #> 9   0.78631958   0.3233032 0.639316608   0.3294436     0.4585263    0.14497632 #> 10  0.70756126   0.2123931 0.513561515   0.1457366     0.4405849    0.11365994 #>    rho_smoothed #> 1    -1.0000000 #> 2     0.1647662 #> 3    -0.6779013 #> 4    -0.4978356 #> 5    -1.0000000 #> 6     1.0000000 #> 7     0.6439003 #> 8     0.8391464 #> 9     0.9785889 #> 10    1.0000000   ## The function can handle non-ordered time series  with(head(stockprice)[c(1, 3, 6, 2, 4, 5), ], calc_rho(x = SP500, y = FTSE100, t = DateID, h = 20)) #>              x            y           x2           y2            xy          t #> 1  0.004361280 -0.010096362 1.902076e-05 1.019365e-04 -4.403306e-05 2000-04-03 #> 2 -0.004479051 -0.007449493 2.006189e-05 5.549494e-05  3.336666e-05 2000-04-06 #> 3 -0.007420214 -0.004377977 5.505958e-05 1.916668e-05  3.248553e-05 2000-04-04 #> 4 -0.007980069 -0.003332639 6.368150e-05 1.110648e-05  2.659469e-05 2000-04-07 #> 5  0.008375645  0.011874107 7.015143e-05 1.409944e-04  9.945331e-05 2000-04-10 #> 6  0.009697455  0.015107515 9.404064e-05 2.282370e-04  1.465045e-04 2000-04-05 #>      x_smoothed    y_smoothed  x2_smoothed  y2_smoothed  xy_smoothed #> 1  0.0013418481 -0.0039462414 3.798239e-05 8.905361e-05 1.271878e-05 #> 2  0.0004106755  0.0006175389 5.474643e-05 9.353427e-05 5.175352e-05 #> 3  0.0010704776 -0.0023441914 4.372446e-05 9.103955e-05 2.628156e-05 #> 4  0.0000271654  0.0019865563 6.004416e-05 9.410375e-05 6.372498e-05 #> 5 -0.0013336726  0.0056494153 7.509061e-05 9.314396e-05 9.659432e-05 #> 6  0.0007590436 -0.0008249469 4.930863e-05 9.252018e-05 3.927963e-05 #>   sd_x_smoothed sd_y_smoothed rho_smoothed #> 1   0.006015134   0.008572093    0.3493645 #> 2   0.007387678   0.009651576    0.7222712 #> 3   0.006525224   0.009249017    0.4770515 #> 4   0.007748769   0.009495122    0.8653833 #> 5   0.008562239   0.007824836    1.5542048 #> 6   0.006980866   0.009583300    0.5965016   ## Note: the function does not handle missing data (by design)  # calc_rho(x = c(NA, rnorm(9)), y = rnorm(10), t = c(1:2, 23:30), h = 2) ## should err (if ran)    ########################################################### ## Examples for the internal function computing the RMSE ## ###########################################################  ## Compute the RMSE on the correlation estimate # nb: takes a few seconds to run, so not run by default  run <- in_pkgdown() || FALSE ## change to TRUE to run the example if (run) {  small_clean_dataset <- head(na.omit(stockprice), n = 200) with(small_clean_dataset, calc_RMSE(x = SP500, y = FTSE100, t = DateID, h = 10))  } #> [1] 1.541382     ################################################################ ## Examples for the internal function selecting the bandwidth ## ################################################################  ## Automatic selection of the bandwidth using parallel processing # nb: takes a few seconds to run, so not run by default  run <- in_pkgdown() || FALSE ## change to TRUE to run the example if (run) {  small_clean_dataset <- head(na.omit(stockprice), n = 200) with(small_clean_dataset, select_h(x = SP500, y = FTSE100, t = DateID))  } #> h selected using LOO-CV = 105.1 #> Bandwidth automatic selection completed in 3.4 seconds #> $h #> [1] 105.0813 #>  #> $h_selection #> [1] \"LOO-CV\" #>  #> $RMSE #> [1] 1.234257 #>  #> $time #> elapsed  #>   3.418  #>"},{"path":"https://courtiol.github.io/timevarcorr/reference/test_equality.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute equality test between correlation coefficient estimates at two time points — test_equality","title":"Compute equality test between correlation coefficient estimates at two time points — test_equality","text":"function tests whether smoothed correlation values two time points equal (H0) . test described page 341 Choi & Shin (2021).","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/test_equality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute equality test between correlation coefficient estimates at two time points — test_equality","text":"","code":"test_equality(   tcor_obj,   t1 = 1,   t2 = nrow(tcor_obj),   test = c(\"student\", \"chi2\") )"},{"path":"https://courtiol.github.io/timevarcorr/reference/test_equality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute equality test between correlation coefficient estimates at two time points — test_equality","text":"tcor_obj output call tcor() CI = TRUE. t1 first time point used test (default, first time point time series). t2 second time point used test (default, last time point time series). test character string indicating test use (\"student\", default; \"chi2\").","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/test_equality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute equality test between correlation coefficient estimates at two time points — test_equality","text":"data.frame result test, including effect size (delta_r = r[t2] - r[t1]).","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/test_equality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute equality test between correlation coefficient estimates at two time points — test_equality","text":"Two different test statistics can used, one asymptotically Student-t distributed H0 one chi-square distributed. practice, seems give similar results.","code":""},{"path":[]},{"path":"https://courtiol.github.io/timevarcorr/reference/test_equality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute equality test between correlation coefficient estimates at two time points — test_equality","text":"","code":"## Simple example  res <- with(stockprice, tcor(x = SP500, y = FTSE100, t = DateID, h = 50, CI = TRUE)) test_equality(res) #> The bandwidth stored in `tcor_obj` and used by `test_equality()` has not been automatically selected but was set by the user. Rerun `tcor()` without specifying `h` if you want otherwise. #>           t1        r1         t2        r2   delta_r SE_delta_r   T_stat   df #> 1 2000-04-03 0.3484362 2017-12-04 0.5800026 0.2315664  0.1798866 1.287291 8650 #>           p #> 1 0.1980274  ## Chi2 instead of Student's t-test  test_equality(res, test = \"chi2\") #> The bandwidth stored in `tcor_obj` and used by `test_equality()` has not been automatically selected but was set by the user. Rerun `tcor()` without specifying `h` if you want otherwise. #>           t1        r1         t2        r2   delta_r SE_delta_r chi2_stat df #> 1 2000-04-03 0.3484362 2017-12-04 0.5800026 0.2315664  0.1798866  1.657118  1 #>           p #> 1 0.1979929   ## Time point can be dates or indices (mixing possible) but output as in input data  test_equality(res, t1 = \"2000-04-04\", t2 = 1000) #> The bandwidth stored in `tcor_obj` and used by `test_equality()` has not been automatically selected but was set by the user. Rerun `tcor()` without specifying `h` if you want otherwise. #>           t1        r1         t2       r2     delta_r SE_delta_r     T_stat #> 1 2000-04-04 0.3485947 2004-06-04 0.260934 -0.08766079  0.1766849 -0.4961421 #>     df         p #> 1 8650 0.6198068 res[1000, \"t\"] ## t2 matches with date in `res` #> [1] \"2004-06-04\" stockprice[1000, \"DateID\"] ## t2 does not match with date `stockprice` due to missing values #> # A tibble: 1 × 1 #>   DateID     #>   <date>     #> 1 2004-02-02   ## It could be useful to use `keep.missing = TRUE` for index to match original data despite NAs  res2 <- with(stockprice, tcor(x = SP500, y = FTSE100, t = DateID,                               h = 50, CI = TRUE, keep.missing = TRUE)) test_equality(res2, t1 = \"2000-04-04\", t2 = 1000) #> The bandwidth stored in `tcor_obj` and used by `test_equality()` has not been automatically selected but was set by the user. Rerun `tcor()` without specifying `h` if you want otherwise. #>           t1        r1         t2         r2    delta_r SE_delta_r    T_stat #> 1 2000-04-04 0.3485947 2004-02-02 0.06689227 -0.2817025   0.180182 -1.563433 #>     df         p #> 1 8650 0.1179874 res[1000, \"t\"] ## t2 matches with date in `res` #> [1] \"2004-06-04\" stockprice[1000, \"DateID\"] ## t2 does match with date `stockprice` despite missing values #> # A tibble: 1 × 1 #>   DateID     #>   <date>     #> 1 2004-02-02"},{"path":"https://courtiol.github.io/timevarcorr/reference/test_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Test difference between correlation coefficient estimates and a value of reference — test_ref","title":"Test difference between correlation coefficient estimates and a value of reference — test_ref","text":"function tests whether smoothed correlation values equal (H0) reference value (default = 0). test described Choi & Shin, 2021, based idea behind test_equality().","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/test_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test difference between correlation coefficient estimates and a value of reference — test_ref","text":"","code":"test_ref(   tcor_obj,   t = tcor_obj$t,   r_ref = 0,   test = c(\"student\", \"chi2\"),   p.adjust.methods = c(\"none\", \"bonferroni\", \"holm\", \"hochberg\", \"hommel\", \"BH\", \"BY\",     \"fdr\") )"},{"path":"https://courtiol.github.io/timevarcorr/reference/test_ref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test difference between correlation coefficient estimates and a value of reference — test_ref","text":"tcor_obj output call tcor() CI = TRUE. t vector time point(s) used test (default, time points considered). r_ref scalar indicating reference value correlation coefficient used test (default = 0). test character string indicating test use (\"student\", default; \"chi2\"). p.adjust.methods character string indicating method used adjust p-values multiple testing (see p.adjust(); default = \"none\").","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/test_ref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test difference between correlation coefficient estimates and a value of reference — test_ref","text":"data.frame result test, including effect size (delta_r = r[t] - r_ref).","code":""},{"path":"https://courtiol.github.io/timevarcorr/reference/test_ref.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test difference between correlation coefficient estimates and a value of reference — test_ref","text":"Two different test statistics can used, one asymptotically Student-t distributed H0 one chi-square distributed. practice, seems give similar results.","code":""},{"path":[]},{"path":"https://courtiol.github.io/timevarcorr/reference/test_ref.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test difference between correlation coefficient estimates and a value of reference — test_ref","text":"","code":"## Comparison of all correlation values to reference of 0.5  res <- with(stockprice, tcor(x = SP500, y = FTSE100, t = DateID, h = 300, CI = TRUE)) ref <- 0.5 test_against_ref <- test_ref(res, r_ref = ref) #> The bandwidth stored in `tcor_obj` and used by `test_ref()` has not been automatically selected but was set by the user. Rerun `tcor()` without specifying `h` if you want otherwise. head(test_against_ref) #>            t         r r_ref     delta_r SE_delta_r     T_stat   df         p #> 1 2000-04-03 0.4354187   0.5 -0.06458131 0.07161311 -0.9018084 8650 0.3671838 #> 2 2000-04-04 0.4362800   0.5 -0.06372005 0.07142815 -0.8920859 8650 0.3723717 #> 3 2000-04-05 0.4370884   0.5 -0.06291158 0.07124627 -0.8830157 8650 0.3772523 #> 4 2000-04-06 0.4378701   0.5 -0.06212989 0.07106580 -0.8742587 8650 0.3820017 #> 5 2000-04-07 0.4386006   0.5 -0.06139941 0.07088820 -0.8661442 8650 0.3864351 #> 6 2000-04-10 0.4408871   0.5 -0.05911287 0.07059415 -0.8373622 8650 0.4024122 #>   p_adjustment #> 1         none #> 2         none #> 3         none #> 4         none #> 5         none #> 6         none   ## Plot to illustrate the correspondance with confidence intervals  plot(res$r ~ res$t, type = \"l\", ylim = c(0, 1), col = NULL) abline(v = test_against_ref$t[test_against_ref$p > 0.05], col = \"lightgreen\") abline(v = test_against_ref$t[test_against_ref$p < 0.05], col = \"red\") points(res$r ~ res$t, type = \"l\") points(res$upr ~ res$t, type = \"l\", lty = 2) points(res$lwr ~ res$t, type = \"l\", lty = 2) abline(h = ref, col = \"blue\")    ## Test correlation of 0 a specific time points (using index or dates)  test_ref(res, t = c(100, 150)) #> The bandwidth stored in `tcor_obj` and used by `test_ref()` has not been automatically selected but was set by the user. Rerun `tcor()` without specifying `h` if you want otherwise. #>     t         r r_ref   delta_r SE_delta_r   T_stat   df            p #> 1 100 0.4321759     0 0.4321759 0.06039284 7.156078 8650 8.979024e-13 #> 2 150 0.4483478     0 0.4483478 0.05536091 8.098635 8650 6.313458e-16 #>   p_adjustment #> 1         none #> 2         none test_ref(res, t = c(\"2000-08-18\", \"2000-10-27\")) #> The bandwidth stored in `tcor_obj` and used by `test_ref()` has not been automatically selected but was set by the user. Rerun `tcor()` without specifying `h` if you want otherwise. #>            t         r r_ref   delta_r SE_delta_r   T_stat   df            p #> 1 2000-08-18 0.4300012     0 0.4300012 0.06110005 7.037657 8650 2.104015e-12 #> 2 2000-10-27 0.4455035     0 0.4455035 0.05609660 7.941720 8650 2.243738e-15 #>   p_adjustment #> 1         none #> 2         none"},{"path":"https://courtiol.github.io/timevarcorr/news/index.html","id":"timevarcorr-011","dir":"Changelog","previous_headings":"","what":"timevarcorr 0.1.1","title":"timevarcorr 0.1.1","text":"New submission CRAN revisions. Add Choi & Shin (2021) DESCRIPTION. Improve documentation (returns detailed use LaTeX).","code":""},{"path":"https://courtiol.github.io/timevarcorr/news/index.html","id":"timevarcorr-010","dir":"Changelog","previous_headings":"","what":"timevarcorr 0.1.0","title":"timevarcorr 0.1.0","text":"Initial CRAN submission (rejected).","code":""},{"path":"https://courtiol.github.io/timevarcorr/news/index.html","id":"timevarcorr-0009006-and-earlier","dir":"Changelog","previous_headings":"","what":"timevarcorr 0.0.0.9006 and earlier","title":"timevarcorr 0.0.0.9006 and earlier","text":"Prepare package CRAN release.","code":""}]
